[tool.poetry]
name = "{{cookiecutter.project_name}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.friendly_name}}"
authors = ["{{cookiecutter.author}} <{{cookiecutter.email}}>"]
license = "MIT"
readme = "README.md"

homepage = "https://github.com/{{cookiecutter.github_user}}/{{cookiecutter.project_name}}"
repository = "https://github.com/{{cookiecutter.github_user}}/{{cookiecutter.project_name}}"
documentation = "https://{{cookiecutter.project_name}}.readthedocs.io"

[tool.poetry.dependencies]
python = "^3.7.1"
click = "^7.0"

[tool.poetry.dev-dependencies]
pytest = "^6.0.1" # Test backend that supports pytest and unittest tests
coverage = {extras = ["toml"], version = "^5.2"} # Mesures test coverage
mypy = "^0.782"  # lints type hints/annotations
xdoctest = "^0.13.0" # runs examples in docstrings as tests
{% if cookiecutter.docs_backend == "sphinx" %}
sphinx = "^3.2.0" # converts .rst files to static websites for documentation
sphinx-autobuild = "^0.7.1" # Reloads sphinx if source file change
{% elif cookiecutter.docs_backend == "mkdocs" %}
mkdocs = "^1.1.2" # converts .md files to static websites for documentation
{% endif %}
pre-commit = "^2.6.0"  # easy pre-commit hooks
nbstripout = "^0.4.0" # Clears notebook output before commits
flake8 = "^3.8.3"  # ensure PEP8 compliance
flake8-docstrings = "^1.5.0"  # pydocstyle plugin for flake8
flake8-isort = "^4.0.0" # verify and correct import order
black = "^20.8b1"  # python code formatter
safety = "^1.9.0" # Checks for known security vulnerabilities in your dependencies
bandit = "^1.7.0" # Checks for possible security issues in your project
pylint = "^2.8.2" # Code quality linter


[tool.poetry.scripts]
{{cookiecutter.project_name}} = "{{cookiecutter.package_name}}.__main__:main"

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.coverage.run]
branch = true
source = ["{{cookiecutter.package_name}}"]

[tool.coverage.report]
show_missing = true
fail_under = 100
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if __name__ == .__main__.:"
]

[tool.isort]
profile = "black"
known_first_party = "{{cookiecutter.project_name}}"
src_paths = ["src", "tests"]

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = [
    "tests",
]

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"
